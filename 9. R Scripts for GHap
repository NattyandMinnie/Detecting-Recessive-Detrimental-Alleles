NOTE that this script consists of several different scripts ghap1.R to ghap7.R. 
##### RSTUDIO #####

filename: ghap1.R

# Loading packages
library(GHap)
library(tidyverse)
setwd("~/filepath/Out/")

# Making GHap files from Shapeit phased dataset (.haps and .sample). Converting oxford format files to ghap format (the sample-ids are the same for all chromosomes, so dont need to do all chr. for this)
haps.files = paste("Chr",1:31,".phased",".haps",sep="")
command <- "tail -n+3 Chr1.phased.sample | cut -d' ' -f1,2 > Chr.samples" 
system(command)
for(i in 1:31){
  command <- paste("cat",haps.files[i],"| cut -d' ' -f1-5 >> Chr.markers")
  system(command)
  command <- paste("cat",haps.files[i],"| cut -d' ' -f1-5 --complement >> Chr.phase")
  system(command)
}

# Once the non-binary phase data (phaseb/markers/samples) has been generated Compress phase data using prefix, gives the binary .phaseb files
ghap.compress(input.file = "Chr", out.file = "Chr")





filename: ghap2.R

# Loading packages and set working environment
library(GHap)
library(tidyverse)
setwd("~/filepath/Out/")

# Load the .phase files into environment
phase <- ghap.loadphase(input.file = "Chr")

# Generate blocks and perform haplotyping
Chr.blocks.150kb <- ghap.blockgen(phase, windowsize = 700, slide = 150, unit = "kbp")
ghap.haplotyping(phase, Chr.blocks.150kb, batchsize = 100, ncores = 8, outfile = "Chr150")
haplo150 <- ghap.loadhaplo(hapsamples.file = "Chr150.hapsamples", hapalleles.file = "Chr150.hapalleles", hapgenotypesb.file = "Chr150.hapgenotypesb")

# Perform haplotype statistics calculations
hapstats150 <- ghap.hapstats(haplo150, ncores = 8)
hapstats150$CHR <- as.numeric(hapstats150$CHR)
hapstats150$Pless <- ppois(q = hapstats150$O.HOM, lambda = hapstats150$E.HOM, lower.tail = TRUE) 
hapstats150$Pexcess <- ppois(q = hapstats150$O.HOM, lambda = hapstats150$E.HOM, lower.tail = FALSE)
hapstats150$P <- hapstats150$Pless / hapstats150$Pexcess

# Write results to files
write_delim(hapstats150, "hapstats150")





filename: ghap3.R

# Haplotype Statistics with GHap
# Loading packages
library(GHap)
library(tidyverse)

# Set working directory and load phase files
setwd("~/filepath/Out/")
phase <- ghap.loadphase(input.file = "Chr")

# Generate haplotype blocks with block size of 100kb
Chr.blocks.100kb <- ghap.blockgen(phase, windowsize = 500, slide = 100, unit = "kbp")

# Perform haplotyping and save results
ghap.haplotyping(phase, Chr.blocks.100kb, batchsize = 100, ncores = 8, outfile = "Chr100")
haplo100 <- ghap.loadhaplo(hapsamples.file = "Chr100.hapsamples", hapalleles.file = "Chr100.hapalleles", hapgenotypesb.file = "Chr100.hapgenotypesb")
hapstats100 <- ghap.hapstats(haplo100, ncores = 8)

# Write results to files
write_delim(hapstats100, "hapstats100")





filename: ghap4.R

# Haplotype Statistics with GHap

# Load packages
library(GHap)
library(tidyverse)

# Set working directory
setwd("~/filepath/Out/")

# Load the .phase files into environment
phase <- ghap.loadphase(input.file = "Chr")

# Generate blocks
Chr.blocks.60kb <- ghap.blockgen(phase, windowsize = 300, slide = 60, unit = "kbp")

# Haplotype analysis
ghap.haplotyping(phase, Chr.blocks.60kb, batchsize = 100, ncores = 8, outfile = "Chr60")
haplo60 <- ghap.loadhaplo(hapsamples.file = "Chr60.hapsamples", hapalleles.file = "Chr60.hapalleles", hapgenotypesb.file = "Chr60.hapgenotypesb")
hapstats60 <- ghap.hapstats(haplo60, ncores = 8)

# Manipulate data
hapstats60$CHR <- as.numeric(hapstats60$CHR)
hapstats60$Pless <- ppois(q = hapstats60$O.HOM, lambda = hapstats60$E.HOM, lower.tail = TRUE)
hapstats60$Pexcess <- ppois(q = hapstats60$O.HOM, lambda = hapstats60$E.HOM, lower.tail = FALSE)
hapstats60$P <- hapstats60$Pless / hapstats60$Pexcess

# Write data to file
write_delim(hapstats60, "hapstats60")






filename: ghap5.R

# Haplotype Statistics with GHap
# Loading packages
library(GHap)
library(tidyverse)


# Set working directory
setwd("~/filepath/Out/")

# Load the .phase files into environment
phase <- ghap.loadphase(input.file = "Chr")

# Generate haplotype blocks
Chr.blocks.20kb <- ghap.blockgen(phase, windowsize = 100, slide = 20, unit = "kbp")

# Perform haplotyping
ghap.haplotyping(phase, Chr.blocks.20kb, batchsize = 100, ncores = 8, outfile = "Chr20")

# Load haplotype data
haplo20 <- ghap.loadhaplo(hapsamples.file = "Chr20.hapsamples", hapalleles.file = "Chr20.hapalleles", hapgenotypesb.file = "Chr20.hapgenotypesb")

# Calculate haplotype statistics
hapstats20 <- ghap.hapstats(haplo20, ncores = 8)

# Convert CHR column to numeric
hapstats20$CHR <- as.numeric(hapstats20$CHR)

# Calculate p-values and add to hapstats20 data frame
hapstats20$Pless <- ppois(q = hapstats20$O.HOM, lambda = hapstats20$E.HOM, lower.tail = TRUE)
hapstats20$Pexcess <- ppois(q = hapstats20$O.HOM, lambda = hapstats20$E.HOM, lower.tail = FALSE)
hapstats20$P <- hapstats20$Pless / hapstats20$Pexcess

# Write data frames to file
write_delim(hapstats20, "hapstats20")







filename: ghap6.R

# Haplotype Statistics with GHap

# Loading packages
library(GHap)
library(tidyverse)

# Setting working directory
setwd("~/filepath/Out/")

# Load the .phase files into environment
phase <- ghap.loadphase(input.file = "Chr")

# Generate haplotype blocks
Chr.blocks.5kb <- ghap.blockgen(phase, windowsize = 40, slide = 5, unit = "kbp")

# Perform haplotyping and save to file
ghap.haplotyping(phase, Chr.blocks.5kb, batchsize = 100, ncores = 8, outfile = "Chr5")
haplo5 <- ghap.loadhaplo(hapsamples.file = "Chr5.hapsamples", hapalleles.file = "Chr5.hapalleles", hapgenotypesb.file = "Chr5.hapgenotypesb")

# Calculate haplotype statistics
hapstats5 <- ghap.hapstats(haplo5, ncores = 8)
as.numeric(hapstats5$CHR) -> hapstats5$CHR
hapstats5$Pless <- ppois(q = hapstats5$O.HOM, lambda = hapstats5$E.HOM, lower.tail = TRUE)
hapstats5$Pexcess <- ppois(q = hapstats5$O.HOM, lambda = hapstats5$E.HOM, lower.tail = FALSE)
hapstats5$P <- hapstats5$Pless / hapstats5$Pexcess

# Save results to file
write_delim(hapstats5, "hapstats5")







filename: ghap7.R

# Loading packages
library(GHap)
library(tidyverse)

# Set working directory
setwd("~/filepath/Out/")

# Load the .phase files into environment
phase <- ghap.loadphase(input.file = "Chr")

# Generate blocks
Chr.blocks.1kb <- ghap.blockgen(phase, windowsize = 10, slide = 1, unit = "kbp")

# Perform haplotyping and load haplotype data
ghap.haplotyping(phase, Chr.blocks.1kb, batchsize = 100, ncores = 8, outfile = "Chr1")
haplo1 <- ghap.loadhaplo(hapsamples.file = "Chr1.hapsamples", hapalleles.file = "Chr1.hapalleles", hapgenotypesb.file = "Chr1.hapgenotypesb")

# Calculate haplotype statistics
hapstats1 <- ghap.hapstats(haplo1, ncores = 8)
as.numeric(hapstats1$CHR) -> hapstats1$CHR
hapstats1$Pless <- ppois(q = hapstats1$O.HOM, lambda = hapstats1$E.HOM, lower.tail = TRUE)
hapstats1$Pexcess<-ppois(q = hapstats1$O.HOM, lambda = hapstats1$E.HOM, lower.tail = FALSE)
hapstats1$P <- hapstats1$Pless / hapstats1$Pexcess

# Write data frames to file
write_delim(hapstats1, "hapstats1")

